---
- hosts: all
  become: true
  tasks:
    - name: Wait for SSH to be available
      wait_for:
        host: "{{ ansible_host }}"
        port: 22
        state: started
        delay: 10
        timeout: 300
      tags:
        - wait_for_ssh

    - name: Clear corrupted package cache (if exists)
      command: rm -f /var/cache/apt/pkgcache.bin
      ignore_errors: true

    - name: Clear any existing lock file (if exists)
      command: rm -f /var/lib/dpkg/lock-frontend
      ignore_errors: true

    - name: Clear any existing lock file on dpkg (if exists)
      command: rm -f /var/lib/dpkg/lock
      ignore_errors: true

    - name: Run apt-get clean to remove cached packages
      command: apt-get clean
      ignore_errors: true

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Nginx
      apt:
        name: nginx
        state: present
        update_cache: yes
      retries: 5
      delay: 10
      register: result
      until: result is succeeded

    - name: Install Certbot and Nginx plugin
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - certbot
        - python3-certbot-nginx

    - name: Configure Nginx for HTTP challenge
      template:
        src: "{{ playbook_dir }}/templates/nginx_http.conf.j2"
        dest: /etc/nginx/sites-available/default
        owner: root
        group: root
        mode: '0644'

    - name: Validate Nginx configuration for HTTP
      command: nginx -t
      register: nginx_test
      ignore_errors: true

    - name: Fail if Nginx configuration for HTTP is invalid
      fail:
        msg: "Nginx configuration for HTTP is invalid. Please check the configurations."
      when: nginx_test.rc != 0

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Obtain SSL certificate (HTTP challenge)
      command: >
        certbot --nginx -d jstafford.xyz --non-interactive --agree-tos --email jstafford3344@gmail.com -v
      register: certbot_result
      ignore_errors: true

    - name: Debug Certbot output
      debug:
        msg: "{{ certbot_result.stdout }}"

    - name: Check if SSL certificate files exist
      stat:
        path: "/etc/letsencrypt/live/jstafford.xyz/fullchain.pem"
      register: cert_file

    - name: Fail if SSL certificate does not exist
      fail:
        msg: "SSL certificate was not obtained. Ensure Certbot succeeded."
      when: not cert_file.stat.exists
    
    - name: Copy Website Files
      copy:
        src: "{{ playbook_dir }}/../personal_resume_website/"
        dest: /var/www/html/personal_resume_website/
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Configure Nginx for HTTPS
      template:
        src: "{{ playbook_dir }}/templates/nginx_https.conf.j2"
        dest: /etc/nginx/sites-available/default
        owner: root
        group: root
        mode: '0644'
      when: cert_file.stat.exists

    - name: Validate Nginx configuration for HTTPS
      command: nginx -t
      register: nginx_test
      ignore_errors: true
      when: cert_file.stat.exists

    - name: Fail if Nginx configuration for HTTPS is invalid
      fail:
        msg: "Nginx configuration for HTTPS is invalid. Please check the configuration."
      when: cert_file.stat.exists and nginx_test.rc != 0

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Set up automatic certificate renewal
      cron:
        name: "Certbot renew cron job"
        job: "certbot renew --quiet"
        minute: 0
        hour: 3